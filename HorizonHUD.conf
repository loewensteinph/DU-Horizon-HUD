name: HorizonHUD - v0.803 (Minified)
slots:
  core:
    class: CoreUnit
  radar:
    class: RadarPVPUnit
    select: manual
  antigrav:
    class: AntiGravityGeneratorUnit
  warpdrive:
    class: WarpDriveUnit
  gyro:
    class: GyroUnit
  weapon:
    class: WeaponUnit
    select: manual
  dbHud:
    class: databank
  vBooster:
    class: VerticalBooster
  hover:
    class: Hovercraft
  door:
    class: DoorUnit
    select: manual
  forcefield:
    class: ForceFieldUnit
    select: manual
  atmofueltank:
    class: AtmoFuelContainer
    select: manual
  spacefueltank:
    class: SpaceFuelContainer
    select: manual
  rocketfueltank:
    class: RocketFuelContainer
    select: manual
handlers:
  unit:
    start:
      lua: |
        -- error handling code added by wrap.lua
        __wrap_lua__stopped = false
        __wrap_lua__stopOnError = false
        __wrap_lua__rethrowErrorAlways = false
        __wrap_lua__rethrowErrorIfStopped = true
        __wrap_lua__printError = true
        __wrap_lua__showErrorOnScreens = true
        
        function __wrap_lua__error (message)
          if __wrap_lua__stopped then return end
        
          -- make the traceback more readable and escape HTML syntax characters
          message = tostring(message):gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk'):gsub("&", "&amp;"):gsub("<", "&lt;"):gsub(">", "&gt;")
        
          local unit = unit or self or {}
        
          if __wrap_lua__showErrorOnScreens then
            for _, value in pairs(unit) do
              if type(value) == "table" and value.setCenteredText and value.setHTML then -- value is a screen
                if message:match("\n") then
                  value.setHTML([[
        <pre style="color: white; background-color: black; font-family: Consolas,monospace; font-size: 4vh; white-space: pre-wrap; margin: 1em">
        Error: ]] .. message .. [[
        </pre>]])
                else
                  value.setCenteredText(message)
                end
              end
            end
          end
        
          if __wrap_lua__printError and system and system.print then
            system.print("Error: " .. message:gsub("\n", "<br>"))
          end
        
          if __wrap_lua__stopOnError then
            __wrap_lua__stopped = true
          end
        
          if __wrap_lua__stopped and unit and unit.exit then
            unit.exit()
          end
        
          if __wrap_lua__rethrowErrorAlways or (__wrap_lua__stopped and __wrap_lua__rethrowErrorIfStopped) then
            error(message)
          end
        end
        
        -- in case traceback is removed or renamed
        __wrap_lua__traceback = traceback or (debug and debug.traceback) or function (arg1, arg2) return arg2 or arg1 end
        
        local ok, message = xpcall(function ()
        
        -- script code
        
        Nav=Navigator.new(system,core,unit)script={}local a=0;local b=0;local c=0;local d=0;local e=nil;targetAltitude=0;increment=0.125;finalBrakeInput=0;level=true;autoalt=true;braking=false;startPosition=vec3(core.getConstructWorldPos())initialAlt=core.getAltitude()targetAltitude=initialAlt;function ternary(f,g,h)if f then return g else return h end end;function round(i,j)local k=10^(j or 0)if j~=nil then return math.floor(i*k+0.5)/k else return math.floor((i*k+0.5)/k)end end;function Kinematics()local e={}local l=30000000/3600;local m=l*l;local n=100;local function o(p)return 1/math.sqrt(1-p*p/m)end;function e.computeAccelerationTime(q,r,s)local t=l*math.asin(q/l)return(l*math.asin(s/l)-t)/r end;function e.computeDistanceAndTime(q,s,u,v,w,x)w=w or 0;x=x or 0;local y=q<=s;local z=v*(y and 1 or-1)/u;local A=-x/u;local B=z+A;if y and B<=0 or not y and B>=0 then return-1,-1 end;local C,D=0,0;if z~=0 and w>0 then local t=math.asin(q/l)local E=math.pi*(z/2+A)local F=z*w;local G=l*math.pi;local p=function(H)local I=(E*H-F*math.sin(math.pi*H/2/w)+G*t)/G;local J=math.tan(I)return l*J/math.sqrt(J*J+1)end;local K=y and function(L)return L>=s end or function(L)return L<=s end;D=2*w;if K(p(D))then local M=0;while math.abs(D-M)>0.5 do local H=(D+M)/2;if K(p(H))then D=H else M=H end end end;local N=q;local O=D/n;for P=1,n do local Q=p(P*O)C=C+(Q+N)*O/2;N=Q end;if D<2*w then return C,D end;q=N end;local t=l*math.asin(q/l)local R=(l*math.asin(s/l)-t)/B;local S=m*math.cos(t/l)/B;local distance=S-m*math.cos((B*R+t)/l)/B;return distance+C,R+D end;function e.computeTravelTime(q,r,distance)if distance==0 then return 0 end;if r>0 then local t=l*math.asin(q/l)local S=m*math.cos(t/l)/r;return(l*math.acos(r*(S-distance)/m)-t)/r end;assert(q>0,"Acceleration and initial speed are both zero.")return distance/q end;function e.lorentz(p)return o(p)end;return e end;function script.onStart()VERSION_NUMBER=0.803 end;function script.onFlush()LastMaxBrake=0;local T=unit.getAtmosphereDensity()local U=2;yawSpeedFactor=math.max(yawSpeedFactor,0.01)U=math.max(U,0.01)brakeSpeedFactor=math.max(brakeSpeedFactor,0.01)brakeFlatFactor=math.max(brakeFlatFactor,0.01)stabilization=0;local V=a+system.getControlDeviceForwardInput()local W=b+system.getControlDeviceYawInput()local X=c-system.getControlDeviceLeftRightInput()local Y=vec3(core.getWorldVertical())constructUp=vec3(core.getConstructWorldOrientationUp())constructForward=vec3(core.getConstructWorldOrientationForward())constructRight=vec3(core.getConstructWorldOrientationRight())constructVelocity=vec3(core.getWorldVelocity())local Z=vec3(core.getWorldVelocity()):normalize()local a0=getRoll(Y,constructForward,constructRight)local a1=math.abs(a0)local a2=utils.sign(a0)local a3=vec3(core.getWorldAngularVelocity())local a4=X*yawSpeedFactor*constructUp;finalBrakeInput=d;if not level then a4=V*pitchSpeedFactor*constructRight+W*rollSpeedFactor*constructForward+X*yawSpeedFactor*constructUp end;if autoalt then e=Kinematics()local a5=json.decode(unit.getData()).maxBrake;if a5~=nil then LastMaxBrake=a5 end;vSpeed=constructVelocity:project_on(Y):len()vSpeedSigned=vSpeed*-utils.sign(constructVelocity:dot(Y))brakeDistance=0;if LastMaxBrake~=nil then brakeDistance,_=e.computeDistanceAndTime(vSpeed,0,core.getConstructIMass(),0,0,LastMaxBrake-core.g()*core.getConstructIMass()*utils.sign(vSpeedSigned))end;currentaltitude=core.getAltitude()if currentaltitude==nil then currentaltitude=0 end;diff=targetAltitude-currentaltitude;if T>0.2 then MaxSpeed=1100 else MaxSpeed=4000 end;targetSpeed=utils.clamp(diff,-MaxSpeed,MaxSpeed)if math.abs(Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal))<0.1 and math.abs(targetAltitude-currentaltitude)<25 and math.abs(targetAltitude-currentaltitude)>5 then finalBrakeInput=1 elseif math.abs(Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal))<0.1 and T>0 and targetAltitude<currentaltitude and math.abs(vSpeed)>25 and brakeDistance>math.abs(targetAltitude-currentaltitude)then finalBrakeInput=1 elseif teledown>0 and targetAltitude<currentaltitude and math.abs(vSpeed)>10 then finalBrakeInput=1;targetSpeed=10 else finalBrakeInput=d end;local a6=3;local a7=0;if currentaltitude<targetAltitude then a7=-1;targetVelocity=a7*targetSpeed/3.6*Y;stabilization=a6*(targetVelocity-vec3(core.getWorldVelocity()))Nav:setEngineCommand("vertical, brake",stabilization-vec3(core.getWorldGravity()),vec3(),false)end;if currentaltitude>targetAltitude then a7=1;targetVelocity=a7*math.abs(targetSpeed)/3.6*Y;stabilization=a6*(targetVelocity-vec3(core.getWorldVelocity()))Nav:setEngineCommand("vertical, brake",stabilization-vec3(core.getWorldGravity()),vec3(),false)end end;if level then local a8=getRoll(Y,constructRight,-constructForward)local a9=math.abs(a8)local aa=utils.sign(a8)local ab=constructRight:dot(constructForward)*180;local ac=math.abs(ab)local ad=utils.sign(ab)local ae=0.001;local af=4;if a9>ae then local ag=utils.clamp(0,a9-30,a9+30)if PitchPID==nil then PitchPID=pid.new(af*0.01,0,af*0.1)end;PitchPID:inject(ag-a8)local ah=PitchPID:get()a4=a4+ah*constructRight end;if a1>ae then local ai=utils.clamp(0,a1-30,a1+30)if rollPID==nil then rollPID=pid.new(af*0.01,0,af*0.1)end;rollPID:inject(ai-a0)local aj=rollPID:get()a4=a4+aj*constructForward end end;local ak=1;local al=0;local am=1;local an=U*(a4-a3)local ao=vec3(core.getWorldAirFrictionAngularAcceleration())an=an-ao;Nav:setEngineTorqueCommand("torque",an,ak,"airfoil","","",am)local ap=-finalBrakeInput*(brakeSpeedFactor*constructVelocity+brakeFlatFactor*Z)Nav:setEngineForceCommand("brake",ap)local aq="thrust analog longitudinal"local ar=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if ar==axisCommandType.byThrottle then local as=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(aq,axisCommandId.longitudinal)Nav:setEngineForceCommand(aq,as,ak)end;local at="thrust analog lateral"local au=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if au==axisCommandType.byThrottle then local av=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(at,axisCommandId.lateral)Nav:setEngineForceCommand(at,av,ak)elseif au==axisCommandType.byTargetSpeed then local aw=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)autoNavigationEngineTags=autoNavigationEngineTags.." , "..at;autoNavigationAcceleration=autoNavigationAcceleration+aw end;if not autoalt then local ax="thrust analog vertical"local ay=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if ay==axisCommandType.byThrottle then local az=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(ax,axisCommandId.vertical)Nav:setEngineForceCommand(ax,az,ak,"airfoil","ground","",am)end end;Nav:setBoosterCommand("rocket_engine")end;function script.onUpdate()current_max=0;currentvert_max=0;if vSpeedSigned==nil then vSpeed_hud=0 else vSpeed_hud=round(vSpeedSigned*3.6,0)end;if vert_engine.getMaxThrust()==nil then currentvert_max=0 else currentvert_max=vert_engine.getMaxThrust()end;currentvert=round(vert_engine.getThrust()/currentvert_max,2)*100;currentthrust=round(Nav.axisCommandManager:getThrottleCommand(axisCommandId.longitudinal)*100,2)local aA=false;if currentthrust<0 then aA=true end;if currentaltitude==nil then currentaltitude=0 end;currentaltitude=round(currentaltitude,2)targetAltitude=round(targetAltitude,2)initialAlt=round(initialAlt,2)deltaheight=round(math.min(math.abs(currentaltitude),math.abs(targetAltitude))/math.max(math.abs(currentaltitude),math.abs(targetAltitude)),2)*100;teledown=round(tele_down.getDistance(),0)if startPositionAngle==nil then startPositionAngle=0 end;local aB=ternary(level,'<div class="on"></div>','<div class="off"></div>')local aC=ternary(flip,'<div class="on"></div>','<div class="off"></div>')local aD=ternary(autoalt,'<div class="on"></div>','<div class="off"></div>')local aE=finalBrakeInput>0;local aF=ternary(aE,'<div class="on"></div>','<div class="off"></div>')local aG="#2cb6d1"if aA then aG="#F7901E"else end;html=[[
            <style>
                body {
                }
                .zen {
                display: flex;
                flex-direction: column;
                }
                .controls-hud {
                display: flex;
                flex-direction: column;
                justify-content: space-around;
                border-color: #333333;
                border-radius: 12px;
                width: 20%;
                padding: 1% 1.5%;
                overflow: none;
                }
                p {
                font-size: 20px;  
                font-weight: 300;
                color: white;
                }
                .control-container {
                display: flex;
                justify-content: space-between;
                padding: 1%;
                background-color: #20201F;
                opacity:0.6;
                }
                .on {
                background-color: #2cb6d1;
                margin-left: 10px;
                border-radius: 50%;
                width: 20px;
                height: 20px;
                border: 2px solid black;
                }
                .off {
                background-color: #F7901E;
                margin-left: 10px;
                border-radius: 50%;
                width: 20px;
                height: 20px;
                border: 2px solid black;
                }
                #horizontal {
                background-color: #20201F;
                border-radius: 20px; /* (heightOfInnerDiv / 2) + padding */
                padding: 4px;
                }
                #horizontal>div {
                background-color: ]]..aG..[[;    
                width: ]]..math.abs(currentthrust)..[[%; 
                height: 16px;
                border-radius: 10px;
                }
                #vertical {
                background-color: #20201F;
                border-radius: 20px; /* (heightOfInnerDiv / 2) + padding */
                padding: 4px;
                }
                #vertical>div {
                background-color: #2cb6d1;
                width: ]]..currentvert..[[%; 
                height: 16px;
                border-radius: 10px;
                }
                #alt_diff {
                background-color:#20201F;
                border-radius: 20px; /* (heightOfInnerDiv / 2) + padding */
                padding: 4px;
                width: 24px;
                height: 200px;
                }
                #alt_diff>div {
                background-color: #2cb6d1;
                height: ]]..deltaheight..[[%;  
                width: 16px;
                border-radius: 10px;
                position: relative;
                top: ]]..100-deltaheight..[[%; 
                }
        
                </style>
                <div class="zen">
                <div class="controls-hud">
                    <div class="control-container">
                    <p>Distance to Ground</p>
                    ]]..teledown..[[ m
                    </div>
                    <div class="control-container">
                    <p>Vertical Speed</p>
                    ]]..vSpeed_hud..[[ km/h
                    </div>
        
                    <div class="control-container">
                    <p>Braking</p>
                    ]]..aF..[[
                    </div>
                    <div class="control-container">
                        <p>Auto Level</p>
                        ]]..aB..[[
                    </div>
                    <div class="control-container">
                        <p>Auto Altitude</p>
                        ]]..aD..[[
                    </div>
        
        
                    <div class="control-container">
                        <p>Target Alt</p>
                        ]]..targetAltitude.." m"..[[
                    </div>
                    <div class="control-container">
                        <p>Current Alt</p>
                        ]]..currentaltitude.." m"..[[
                    </div>
                    <div class="control-container">
                        <p>Base Alt</p>
                        ]]..initialAlt.." m"..[[
                    </div>
                </div>
                </div>
                <div class="zen">
                    <div class="controls-hud">
                        <p>Horizontal Thrust</p>
                            <div id="horizontal">
                                <div>]]..currentthrust.." %"..[[</div>
                            </div>
                        <p>Vertical Thrust</p>
                            <div id="vertical">
                                <div>]]..currentvert.." %"..[[</div>
                            </div>
                            <p>Height Reached</p>
                            <div id="alt_diff">
                        <div>]]..deltaheight.." %"..[[</div>                
                    </div>
        
                </div>  
                </div>
        
            ]]system.setScreen(html)system.showScreen(1)end;function script.onInputText(aH)local aI;local aJ="/commands /setname /G /agg /addlocation"local aK,aL;local aM=[[Command List:\n
            /commands \n
            /althold <targetheight> - Manually set target height in meters \n
            /goto ::pos{0,2,46.4596,-155.1799,22.6572} - move to target location]]aI=string.find(aH," ")if aI~=nil then aK=string.sub(aH,0,aI-1)aL=string.sub(aH,aI+1)elseif aI==nil or not string.find(aJ,aK)then for aN in string.gmatch(aM,"([^\n]+)")do system.print(aN)end;return end;if aK=="/althold"then if aL==nil or aL==""then msgText="Usage: /althold targetheight"system.print(msgText)return end;if not autoalt then msgText="/althold can only be used in auto altitude mode - press Alt+2 to toggle"system.print(msgText)return end;aL=tonumber(aL)targetAltitude=aL;msgText="Target Altitude set to: '"..aL.."'"system.print(msgText)end;if aK=="/goto"then if aL==nil or aL==""or string.find(aL,"::")==nil then msgText="Usage: /goto ::pos{0,2,46.4596,-155.1799,22.6572}"return end;aI=string.find(aL,"::")local aO=string.sub(aL,aI)local i=" *([+-]?%d+%.?%d*e?[+-]?%d*)"local aP="::pos{"..i..","..i..","..i..","..i..","..i.."}"local aQ,aR,aS,aT,aU=string.match(aO,aP)local aV=atlas[tonumber(aQ)][tonumber(aR)].name;system.print("planet:"..aV.." lat: "..aS.." lon: "..aT.." alt: "..aU)targetPos=vec3(convertToWorldCoordinates(aO))currentPos=vec3(core.getConstructWorldPos())system.print(currentPos:__tostring())system.print(targetPos:__tostring())atan2=currentPos:angle_between(targetPos)system.print("angle:"..atan2)distance=(vec3(core.getConstructWorldPos())-targetPos):len()system.print("distance:"..distance)end end;function script.onActionStart(aW)if aW=="forward"then a=a-1 elseif aW=="backward"then a=a+1 elseif aW=="left"then b=b-1 elseif aW=="right"then b=b+1 elseif aW=="yawright"then c=c-1 elseif aW=="yawleft"then c=c+1 elseif aW=="straferight"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,1.0)elseif aW=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral,-1.0)elseif aW=="up"then upAmount=upAmount+1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,1.0)elseif aW=="down"then upAmount=upAmount-1;Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical,-1.0)elseif aW=="option1"then IncrementAutopilotTargetIndex()toggleView=false elseif aW=="option2"then DecrementAutopilotTargetIndex()toggleView=false end end;function script.onActionStop(aW)if aW=="forward"then a=0 elseif aW=="backward"then a=0 elseif aW=="left"then b=0 elseif aW=="right"then b=0 elseif aW=="yawright"then c=0 elseif aW=="yawleft"then c=0 elseif aW=="straferight"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,-1.0)elseif aW=="strafeleft"then Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral,1.0)elseif aW=="up"then upAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,-1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand("hover",vec3(),1)elseif aW=="down"then upAmount=0;Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical,1.0)Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)Nav:setEngineForceCommand("hover",vec3(),1)end end;script.onStart()
        
        
        -- error handling code added by wrap.lua
        end, __wrap_lua__traceback)
        if not ok then
          __wrap_lua__error(message)
          if not script then script = {} end
        end
    stop:
      lua: |
        if not __wrap_lua__stopped and script.onStop then
          local ok, message = xpcall(script.onStop,__wrap_lua__traceback,unit)
          if not ok then __wrap_lua__error(message) end
        end
    tick(timerId):
      lua: |
        if not __wrap_lua__stopped and script.onTick then
          local ok, message = xpcall(script.onTick,__wrap_lua__traceback,timerId,unit)
          if not ok then __wrap_lua__error(message) end
        end
  system:
    actionStart(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStart then
          local ok, message = xpcall(script.onActionStart,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionStop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionStop then
          local ok, message = xpcall(script.onActionStop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    actionLoop(action):
      lua: |
        if not __wrap_lua__stopped and script.onActionLoop then
          local ok, message = xpcall(script.onActionLoop,__wrap_lua__traceback,action,system)
          if not ok then __wrap_lua__error(message) end
        end
    update:
      lua: |
        if not __wrap_lua__stopped and script.onUpdate then
          local ok, message = xpcall(script.onUpdate,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
    flush:
      lua: |
        if not __wrap_lua__stopped and script.onFlush then
          local ok, message = xpcall(script.onFlush,__wrap_lua__traceback,system)
          if not ok then __wrap_lua__error(message) end
        end
